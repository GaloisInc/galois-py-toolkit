# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Cryptol and Saw Python Clients

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Typecheck with mypy
      run: |
        python -m mypy cryptol saw
    # FIXME - currently cryptol server requires a restart between tests as starting from the
    # initial server state in a request does _not_ seem to restart the working directory of
    # the server.
    # - name: Launch Cryptol Remote Server
    #   run: |
    #     docker run --name=cryptol-remote-api -d \
    #       -v $PWD/tests/cryptol/test-files:/home/cryptol/tests/cryptol/test-files \
    #       -p 8080:8080 \
    #       ghcr.io/galoisinc/cryptol-remote-api:nightly-portable
    # - name: Test Cryptol Remote Server/Client
    #   run: |
    #     python -m unittest discover tests/cryptol
    #     docker container kill cryptol-remote-api
    #   env:
    #     CRYPTOL_SERVER_URL: "http://localhost:8080/"
    # - name: Unittest Cryptol (eval) client/server
    #   run: |
    #     python -m unittest discover tests/cryptol_eval
    - name: Launch SAW Remote Server
      run: |
        docker run --name=saw-remote-api -d \
          -v $PWD/tests/saw/test-files:/tests/saw/test-files \
          -p 8080:8080 \
          galoisinc/saw-remote-api:nightly
    - name: Test SAW Remote Server/Client
      # The below tests should just be `python -m unittest discover tests/saw` or similar
      # but our server needs some tinkering to allow re-use without breaking ATM... =(
      run: |
        python -m unittest tests/saw/test_swap_easy.py
        docker restart saw-remote-api
        # python -m unittest tests/saw/test_llvm_struct.py
        # docker restart saw-remote-api
        # python -m unittest tests/saw/test_salsa20_easy.py
      env:
        SAW_SERVER_URL: "http://localhost:8080/"
